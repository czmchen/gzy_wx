<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"

	xmlns:context="http://www.springframework.org/schema/context"

	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"

	xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="http://www.springframework.org/schema/beans 

       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

       http://www.springframework.org/schema/context 

       http://www.springframework.org/schema/context/spring-context-3.0.xsd

       http://www.springframework.org/schema/tx 

       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd

       http://www.springframework.org/schema/aop 

       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd

       http://www.springframework.org/schema/task

       http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->

	<context:component-scan base-package="com.*.dao" />

	<context:component-scan base-package="com.*.service" />

	<task:annotation-driven />

	<!-- 加载数据源配置文件 -->

	<context:property-placeholder location="classpath*:init.properties" />


	  <!-- 配置 HikariCP 数据源 -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://202.104.28.102:3338/ganzhu_qw_test?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;rewriteBatchedStatements=TRUE&amp;allowMultiQueries=true&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai" />
        <property name="username" value="ganzhu" />
        <property name="password" value="PyeKOPQLqKp5P1MD" />
        <!-- HikariCP 性能优化参数 -->
        <property name="maximumPoolSize" value="1000" />
        <property name="minimumIdle" value="20" />
        <property name="idleTimeout" value="600000" />
        <property name="connectionTimeout" value="30000" />
        <property name="poolName" value="HikariCP-Pool" />
        <property name="maxLifetime" value="1800000" />
        <property name="connectionTestQuery" value="SELECT 1" />
    </bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/*/dao/*.xml" />

	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*.dao" />
	</bean>

	<!-- =======quartz配置文件 start=============== -->
	<!-- 声明工厂 -->
	<bean id="scheduler" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="GZYQuartzScheduler" />
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:quartz.properties" />
		<!--applicationContextSchedulerContextKey： 是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中 
			把spring上下 文以key/value的方式存放在了quartz的上下文中了， 可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文 -->
		<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
	</bean>
	<!-- =======quartz配置文件 end=============== -->


	<!-- 配置事务管理器 -->

	<bean id="transactionManager"

		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"

		p:dataSource-ref="dataSource" />

	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->

	<aop:config proxy-target-class="true">

		<aop:pointcut id="serviceMethod" expression="execution(* com.*.service..*(..))" />

		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />

	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">

		<tx:attributes>

			<tx:method name="*" />

		</tx:attributes>

	</tx:advice>



	<bean class="com.weixin.util.SpringUtil" />



	<!--      第1步：在Spring配置文件中添加如下bean      以后在web.xml中配置session超时时间就无效了，如果需要指定session超时时间，则使用maxInactiveIntervalInSeconds来指定，默认是1800s=30min -->

	<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" p:maxInactiveIntervalInSeconds="1800" />



</beans>

